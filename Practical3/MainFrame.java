/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package praktdarbs1;

import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author edgars
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        // Nostādam JFrame ekrāna vidū.
        this.setLocationRelativeTo(null);
        
        this.jLabel9.setText("");       // Nonullējam
        showInJList();                  // Parāda sarakstu
        
        connect("prakt3.db");           // Savienojamies ar datubāzi
        createTable("Inventory");       // Izveidojam tabulu
        displayDBEntries();             // Parādam datubāzes ierakstus
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Pievienot ierakstu");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jLabel1.setText("Kods (int):");

        jButton2.setText("Nodzēst pēdējo");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jLabel4.setText("Nosaukums (string):");

        jTextField3.setName(""); // NOI18N
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
        });

        jLabel5.setText("Inventāra numurs (int):");

        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField4KeyPressed(evt);
            }
        });

        jLabel6.setText("Uzskaites vērtība (float):");
        jLabel6.setRequestFocusEnabled(false);

        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField5KeyPressed(evt);
            }
        });

        jLabel7.setText("Iegādes vērtība (float):");

        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField6KeyPressed(evt);
            }
        });

        jButton4.setText("Nodzēst visu");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jButton3.setText("Nodzēst izvēlēto");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jLabel8.setText("Izvēlētais ieraksts:");

        jLabel9.setText("x");

        jButton5.setText("Pievienot datubāzē");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jLabel2.setText("Atmiņa:");

        jLabel3.setText("Datubāze:");

        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList2ValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jList2);

        jButton6.setText("Pievienot atmiņai");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        jButton7.setText("Saglabāt datubāzē");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3)
                        .addComponent(jButton1)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4)
                                .addComponent(jLabel1)
                                .addComponent(jLabel6))
                            .addGap(45, 45, 45)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(46, 46, 46)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(47, 47, 47)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(46, 46, 46)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(46, 46, 46)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addGap(28, 28, 28)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5)
                            .addComponent(jButton6))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addComponent(jButton7))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // Pievienojam ierakstu sarakstam.
        if (isEmpty()) {                            // Ja ir tukšs
            MsgBox("Ne visi lauki aizpildīti.");
            } else {
                try {       // Mēģinam iegūt skaitli no String mainīgā.
                    float uzsk_v = Float.parseFloat(jTextField5.getText());
                    float ieg_v = Float.parseFloat(jTextField6.getText());
                    int lielaks = Float.compare(ieg_v, uzsk_v);

                    if (isEmpty()) {
                        MsgBox("Ne visi lauki aizpildīti.");
                    } else if (lielaks < 0) {
                        MsgBox("Uzskaites vērtība nevar būt lielāka par iegādes vērtību.");
                    } else {        // Ja viss ir OK, tad pievienojam
                        this.addFromFields();
                    }
                } catch (NumberFormatException e) {
                     MsgBox("Nepareizs formāts ievadīts. " + e.getClass().getName() + ": " + e.getMessage());
                }
            }
        //this.displayList(strInventory);
    }//GEN-LAST:event_jButton1MouseClicked

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jTextField3.grabFocus();
        }

    }//GEN-LAST:event_jTextField1KeyPressed

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jTextField4.grabFocus();
        }
    }//GEN-LAST:event_jTextField3KeyPressed

    private void jTextField4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jTextField5.grabFocus();
        }
    }//GEN-LAST:event_jTextField4KeyPressed

    private void jTextField5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jTextField6.grabFocus();
        }
    }//GEN-LAST:event_jTextField5KeyPressed

    private void jTextField6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (isEmpty()) {                            // Ja ir tukšs
            MsgBox("Ne visi lauki aizpildīti.");
            } else {
                try {       // Mēģinam iegūt skaitli no String mainīgā.
                    float uzsk_v = Float.parseFloat(jTextField5.getText());
                    float ieg_v = Float.parseFloat(jTextField6.getText());
                    int lielaks = Float.compare(ieg_v, uzsk_v);

                    if (isEmpty()) {
                        MsgBox("Ne visi lauki aizpildīti.");
                    } else if (lielaks < 0) {
                        MsgBox("Uzskaites vērtība nevar būt lielāka par iegādes vērtību.");
                    } else {        // Ja viss ir OK, tad pievienojam
                        this.addFromFields();
                        showInJList();
                    }
                } catch (NumberFormatException e) {
                     MsgBox("Nepareizs formāts ievadīts. " + e.getClass().getName() + ": " + e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jTextField6KeyPressed

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        this.removeAllEntries();
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // Notīra sarakstu.
        this.removeLastEntry();

    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        this.removeSelectedEntry();
    }//GEN-LAST:event_jButton3MouseClicked

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // Zemāk debug pārbaude un izvada izvēlēto vērtību.
        if (evt.getValueIsAdjusting()) {
            String value = (String) jList1.getSelectedValue().toString();
            String index = (String) String.valueOf(jList1.getSelectedIndex());
            System.out.println("Item selected: " + value + " | index: " + index);
            jLabel9.setText(index + " " + value);
        }
    }//GEN-LAST:event_jList1ValueChanged

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        //Ja ir izvēlēts ieraksts, tad ievietojam datubāzē
        if (jList1.getSelectedIndex() >= 0) {
            insertFromMemToDB();
        }
        
        //listElements();
    }//GEN-LAST:event_jButton5MouseClicked

    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList2ValueChanged
        // Zemāk debug pārbaude un izvada izvēlēto vērtību.
        if (evt.getValueIsAdjusting()) {
            String value = (String) jList2.getSelectedValue().toString();
            String index = (String) String.valueOf(jList2.getSelectedIndex());
            System.out.println("Item selected: " + value + " | index: " + index);
            jLabel9.setText(index + " " + value);
        }
    }//GEN-LAST:event_jList2ValueChanged

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        //Ja ir izvēlēts ieraksts, tad ievietojam datubāzē
        if (jList2.getSelectedIndex() >= 0) {
            insertFromDBToMem();
        }
    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        try {
            c.commit();         // Komitējam izmaiņas piespiežot "Saglabāt datubāzē" pogu.
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables

    
    
    // Dinamiskās struktūras glabāšanai atmiņā.
    // Neizmantojam primitīvu masīvu no masīva, bet datu struktūru sarakstu ar sarakstiem (List)
    // Definējam Inventāra sarakstu, kura katrs elements ir saraksts
    private final List<List<String>> strInventory = new ArrayList<>();
    
    // Definējam inventāra ierakstu
    private ArrayList<String> strEntry = new ArrayList<>();

    private final DefaultListModel lm1 = new DefaultListModel();    // atmiņas saraksts
    private final DefaultListModel lm2 = new DefaultListModel();    // datubāzes saraksts
    
    private static Connection c;        // datubāzes konkcijas mainīgais
    private String strArray[];
    
    // Datubāzes konekcijas funkcija
    private static void connect(String db_file) {
        //c = null;
        try {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:" + db_file);
            c.setAutoCommit(false);         // Izslēdzam automātisku saglabāšanu.
        } catch (ClassNotFoundException | SQLException e) {
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);     // Ja neatver datubāzi veiksmīgi, tad aplikācija nelaižas.
        }
        System.out.println("Opened database successfully.");
    }
    
    // Tabulas izveidošanas funkcija
    private static void createTable(String table_name) {
        //c = null;
        String errString = "";
        Statement stmt = null;
        try {
            stmt = c.createStatement();
            String sql = "CREATE TABLE " + table_name.toUpperCase() + 
                         " (KODS NUMERIC     NOT NULL," +
                         " NOSAUKUMS        TEXT   NOT NULL," +
                         " INV_NR           NUMERIC    NOT NULL," +
                         " UZSK_V           NUMERIC    NOT NULL," +
                         " IEG_V            NUMERIC    NOT NULL)";
            stmt.executeUpdate(sql);
            stmt.close();
            //c.close();
            
        } catch (Exception e) {
            //System.err.println(e.getClass().getName() + ": " + e.getMessage());
            errString = e.getMessage();
            //System.exit(0);
        } finally {
            if (errString.contains("already exists")) {
                System.out.println("Table "+ table_name +" already exists so not created again.");
            } else {
                System.out.println("Table "+ table_name +" created successfully.");
            }
        }
       
    }
    
    // Ievadīšana no atmiņas datubāzē funkcija
    private void insertFromMemToDB() {
        Statement stmt = null;
        if (jList1.getSelectedIndex() >= 0) {   // to daram tikai tad, kad ir izvēlēts ieraksts
            try {
                int index = jList1.getSelectedIndex();  // iegūstam izvēlēto indeksu
                String strEl = lm1.get(index).toString();   // indeksa elementu iegūstām kā String mainīgo
                int strSize = strEl.length();               // iegūstam izmēru, lai zinātu cik garš
                String substring = strEl.substring(1, strSize-1);   // no String mainīgā noņemam 1 un pēdējo simbolu
                strArray = substring.split("\\s*,\\s*");    // sadalam String pa elementiem.
                stmt = c.createStatement();
                String sql = "INSERT INTO INVENTORY (KODS,NOSAUKUMS,INV_NR,UZSK_V,IEG_V) " +
                             "VALUES (" + 
                             Integer.parseInt(strArray[0]) + ", '" +
                             strArray[1] + "', " +
                             Integer.parseInt(strArray[2]) +", '" + 
                             Float.parseFloat(strArray[3]) + "', " +
                             Float.parseFloat(strArray[4])+ ");"; 
                stmt.executeUpdate(sql);
                stmt.close();
                //c.commit();
                //c.close();
            } catch ( SQLException | NumberFormatException e ) {
                System.err.println( e.getClass().getName() + ": " + e.getMessage() );
                //System.exit(0);
            }
            System.out.println("Operation done successfully");
            displayDBEntries();
        }
    }
    
    private void insertFromDBToMem() {
        if (jList2.getSelectedIndex() >= 0) { // tikai ja izvēlēts ieraksts
            String value = (String) jList2.getSelectedValue().toString();
            lm1.addElement(value);  // pievienojam atmiņas sarakstam
            //showInJList();          
        }
    }
    
    //int index = 0;
    
    // Debug metode, ko izsauc, lai pārbaudītu pareizās vērtības
    /*
    private void listElements() {
        //System.out.println(strEntry.get(0));
        //System.out.println(strEntry.get(1));
        //System.out.println(strEntry.get(2));
        //String string = lm1.get(0).toString().replace("[", "".replace("]", ""));
        int index = jList1.getSelectedIndex();
        String strEl = lm1.get(index).toString();
        int strSize = strEl.length();
        String substring = strEl.substring(1, strSize-1);
        strArray = substring.split("\\s*,\\s*");
        for (String str : strArray) {
            System.out.println(str);
        }
        
        String sql = "INSERT INTO INVENTORY (KODS,NOSAUKUMS,INV_NR,UZSK_V,IEG_V) " +
                             "VALUES (" + 
                             Integer.parseInt(strArray[0]) + ", '" +
                             strArray[1] + "', " +
                             Integer.parseInt(strArray[2]) +", '" + 
                             Float.parseFloat(strArray[3]) + "', " +
                             Float.parseFloat(strArray[4])+ ");";
        System.out.println(sql);
        //System.out.println(s);
    }
    */
    
    // Parāda datubāzes ierakstus
    private void displayDBEntries() {
        jList2.setModel(lm2);
        
        String resultString = "";
        lm2.clear();
        
        Statement stmt = null;
        try {
            
            stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery( "SELECT * FROM INVENTORY;" );
            while ( rs.next() ) {
                int kods = rs.getInt("KODS");
                String nosaukums = rs.getString("NOSAUKUMS");
                int inv_nr  = rs.getInt("INV_NR");
                float uzsk_v = rs.getFloat("UZSK_V");
                float ieg_v = rs.getFloat("IEG_V");
                //System.out.println( "KODS = " + kods );
                //System.out.println( "NOSAUKUMS = " + nosaukums );
                //System.out.println( "INV_NR = " + inv_nr );
                //System.out.println( "UZSK_V = " + uzsk_v );
                //System.out.println( "IEG_V = " + ieg_v );
                //System.out.println();
                resultString = "[" + kods + ", " + nosaukums + ", " + inv_nr + ", " + uzsk_v + ", " + ieg_v + "]";
                lm2.addElement(resultString);
            }
            
            rs.close();
            stmt.close();
            //c.close();
        } catch ( Exception e ) {
            System.err.println( e.getClass().getName() + ": " + e.getMessage() );
            //System.exit(0);
        }
            System.out.println("Operation done successfully");
    }
    
    private void showInJList() {
        jList1.setModel(lm1);
        //jList1 = new JList(strInventory.toArray());
    }
    
    // Funkcija, kas pievieno inventāra ierakstam vērtības.
    private void addToEntry(String kods, String nosaukums, String inv_nr, String uzsk_v, String ieg_v) {
        strEntry = new ArrayList<>();           // Nonullējam ierakstu pirms tam no jauna ievadam vērtību.
        strEntry.add(kods);
        strEntry.add(nosaukums);
        strEntry.add(inv_nr);
        strEntry.add(uzsk_v);
        strEntry.add(ieg_v);
    }
    
    // Funkcija, kas pievieno inventāra ierakstu inventāra sarakstam.
    private void addToInventory(ArrayList<String> entry) {
        //strInventory.add(entry);
        lm1.addElement(entry);
    }

    // Funkcijas, kas pievieno inventāra sarakstam vērtības no ievades laukiem.
    public void addFromFields() {
        // Defensive programming piemērs - mainīgie definēti ar datu tipu nosaukumā.
        // Parasti dažādām valodām ir dažādi pieņēmumi.
        String str_kods, str_nosaukums, str_inv_nr, str_uzsk_v, str_ieg_v;

        str_kods = jTextField1.getText();
        str_nosaukums = jTextField3.getText();
        str_inv_nr = jTextField4.getText();
        str_uzsk_v = jTextField5.getText();
        str_ieg_v = jTextField6.getText();
        
        try {
            Integer.parseInt(str_kods);
            Integer.parseInt(str_inv_nr);
            Float.parseFloat(str_uzsk_v);
            Float.parseFloat(str_ieg_v);
            // Izsaucam funkciju, kura piešķir inventāra ierakstam reālās vērtības no ievades laukiem.
            addToEntry(str_kods, str_nosaukums, str_inv_nr, str_uzsk_v, str_ieg_v);
            // Tikko iegūtu inventāra ierakstu pievienojam inventāra sarakstam.
            addToInventory(strEntry);
            // Nodzēšam ievades lauku vērtības.
            showInJList();
            clearInputFields();
        } catch (NumberFormatException e) {
            MsgBox("Nepareizs formāts ievadīts.");
        }
        
        
        
    }

    // Funkcija, kas nodzēš ierakstītās vērtības ievades laukos.
    private void clearInputFields() {
        jTextField1.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jTextField6.setText("");
    }
    
    // Funkcijas, kas nodzēš pēdējo ierakstīto vērtību.
    public void removeLastEntry() {
        //int lastEl = strInventory.size();       // iegūstam inventāra izmēru.
        int lastEl = lm1.size();
        if (lastEl > 0) {                       // ja nav tukšs
            // Defensive programming princips - izmanto Exception Handling.
            try {
                lm1.remove(lastEl - 1);    // pēdējā elementa numurs ir (izmērs - 1)
                //displayList(strInventory);
            } catch (IndexOutOfBoundsException e) {
                MsgBox("Out of bounds!");
            }
        } else {
            MsgBox("No more entries to delete.");
        }
    }
    
    public void removeSelectedEntry() {
        //int lastEl = strInventory.size();       // iegūstam inventāra izmēru.
        int lastEl = lm1.size();
        if (lastEl > 0 && jList1.getSelectedIndex() >= 0) {                       // ja nav tukšs
            // Defensive programming princips - izmanto Exception Handling.
            try {
                String index = (String) String.valueOf(jList1.getSelectedIndex());
                String value = (String) jList1.getSelectedValue().toString();
                lm1.remove((int)jList1.getSelectedIndex());    
                System.out.println("Item removed: " + value + " | index: " + index);
                jLabel9.setText("");
                //displayList(strInventory);
            } catch (IndexOutOfBoundsException e) {
                MsgBox("Out of bounds!");
            }
        } else {
            MsgBox("No entries selected.");
        }
    }
    
    // MessageBox funkcija
    public static void MsgBox(String info) {
        JOptionPane.showMessageDialog(null, info);
    }
    
    // Funkcija, kas nodzēš visas ierakstītās vērtības.
    public void removeAllEntries() {
        lm1.clear();
        //strInventory.clear();
        //displayList(strInventory);
    }
    
    // Pārbauda vai kāds lauks nav palicis tukšs.
    public boolean isEmpty() {
        //boolean empty = true;
        
        // empty vērtība ir true, ja kaut viens lauks ir tukšs.
        boolean empty = jTextField1.getText().equals("") || 
                jTextField3.getText().equals("") || 
                jTextField4.getText().equals("") ||
                jTextField5.getText().equals("") ||
                jTextField6.getText().equals("");
        return empty;
    }

    /*
    // Funkcija, kas parāda sarakstu uz ekrāna. Šo vairs nevajag.
    public void displayList(List<List<String>> list) {
        int index = 0;
        StringBuilder sbx = new StringBuilder();
        // No simbolu virknes saraksta ievadam sarakstu pagaidu StringBuilderā.
        for (List<String> strList : list) {
            // Katru ierakstu savā rindā.
            sbx.append("| " + index + " | ");               // vērtības atdalītājs
            for (String str : strList) {
                sbx.append(str + " | ");    // vērtības atdalītājs
            }
            sbx.append("\n");               // katrs ieraksts jaunā rinda
            index++;
        }
        jTextArea1.setText(sbx.toString());
    }
    */
}
